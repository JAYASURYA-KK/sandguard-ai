import type { NextRequest } from "next/server"
import { subscribe } from "@/lib/events"

export const dynamic = "force-dynamic"

export async function GET(_req: NextRequest) {
  const encoder = new TextEncoder()
  let isStreamActive = true

  const stream = new ReadableStream({
    start(controller) {
      const unsubscribe = subscribe((event) => {
        if (!isStreamActive) return
        try {
          const payload = `data: ${JSON.stringify(event)}\n\n`
          controller.enqueue(encoder.encode(payload))
        } catch (error) {
          console.error('Error sending event:', error)
          isStreamActive = false
        }
      })

      controller.enqueue(encoder.encode(": connected\n\n"))

      let keepAliveTimeout: NodeJS.Timeout | null = null
      const keepAlive = () => {
        if (!isStreamActive) return
        try {
          controller.enqueue(encoder.encode(":\n\n"))
          keepAliveTimeout = setTimeout(keepAlive, 15000)
        } catch (error) {
          console.error('Keep-alive error:', error)
          isStreamActive = false
          if (keepAliveTimeout) clearTimeout(keepAliveTimeout)
        }
      }

      keepAliveTimeout = setTimeout(keepAlive, 15000)

      return () => {
        isStreamActive = false
        if (keepAliveTimeout) clearTimeout(keepAliveTimeout)
        unsubscribe()
      }
    },
    cancel() {
      isStreamActive = false
    }
  })

  const headers = new Headers()
  headers.set('Content-Type', 'text/event-stream')
  headers.set('Cache-Control', 'no-cache')
  headers.set('Connection', 'keep-alive')

  return new Response(stream, { headers })
